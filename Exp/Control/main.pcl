#------------------------- Setting Fixation Duration --------------------------
array <int> fix_duration[3] = { 400, 500, 600 };
#-------------------------- Prepare to Record Data --------------------------
string subj = logfile.subject();
int trial_mark = 1;
string COMMA = ",";
string RETURN = "\n";
string data_file_name = subj + "_data.csv";
output_file out = new output_file;
out.open("../Data/" + data_file_name);
array<string> headings[8];
headings[1] = "subject";
headings[2] = "trial";
headings[3] = "block_type";
headings[4] = "main_task";
headings[5] = "irr_stim";
headings[6] = "indirect_task";
headings[7] = "ACC";
headings[8] = "RT";
loop int i = 1 until i > headings.count()
begin
	if i != headings.count() then
		out.print(headings[i] + COMMA);
	elseif i == headings.count() then
		out.print(headings[i]);
	end;
	i = i + 1;
end;
out.print(RETURN);
out.close();
#--------------------------------------------------------------
#                          Present Setup
#--------------------------------------------------------------
int TRIAL_TOTAL = 720;
int PARA_TOTAL = 4;
# read data using input_file type
input_file in = new input_file;
in.open( "./seq/seq.txt" );

# loading formal trial seq list
array<int> trial_list[TRIAL_TOTAL][PARA_TOTAL];
int count = 0;
loop until
   in.end_of_file() || count == TRIAL_TOTAL || !in.last_succeeded()
begin
   count = count + 1;
   trial_list[count][1] = in.get_int(); # block_type
   trial_list[count][2] = in.get_int(); # main_task
   trial_list[count][3] = in.get_int(); # irr_stim
   trial_list[count][4] = in.get_int(); # indirect_task
end;

#------------------------- Set Relax Interval --------------
int count_relax = 0; # 刺激呈现次数计数器
double count_relax_limit = 10; # 休息条件
int count_show_relax = 0; # 由于更新 relax 进度提醒信息

#--------------------------------------------------------------
#                          Subj Plan
#--------------------------------------------------------------
int task_set = 0;
if int(subj)-(int(subj)/2)* 2 == 0 then
	int temp = int(subj);
	task_set = temp/2 - ((temp/2)/4)*4;
elseif int(subj)-(int(subj)/2)* 2 != 0 then
	int temp = int(subj)+1;
	if temp/2 - ((temp/2)/4)*4 != 0 then
		task_set = temp/2 - ((temp/2)/4)*4;
	else
		task_set = 4;
	end;
	
	#task_set = mod(1,4);
end;
# button
# 1 = left
# 2 = right 
int ans_hor = 0; 
int ans_ver = 0; 
int ans_gap = 0; 
int ans_gapno = 0; 

string new_task_remind_caption_motion = "";
string new_task_remind_caption_sound = "";
	
term.print_line("subj: " + subj);
term.print_line("task_set: " + string(task_set));
if task_set == 1 then
	new_task_remind_caption_motion = "判断小球上纹理的朝向 \n\n 水平条纹 = 左手食指按键\n 垂直条纹 = 右手食指按键";
	new_task_remind_caption_sound = "判断声音中有无间隔 \n\n 有间隔 = 左手食指按键\n 无间隔 = 右手食指按键";

	ans_hor = 1; 
	ans_ver = 2; 
	ans_gap = 1; 
	ans_gapno = 2; 
	
elseif task_set == 2 then
	new_task_remind_caption_motion = "判断小球上纹理的朝向 \n\n 垂直条纹 = 左手食指按键\n 水平条纹 = 右手食指按键";
	new_task_remind_caption_sound = "判断声音中有无间隔 \n\n 有间隔 = 左手食指按键\n 无间隔 = 右手食指按键";

	ans_hor = 2; 
	ans_ver = 1; 
	ans_gap = 1; 
	ans_gapno = 2; 
	
elseif task_set == 3 then
	new_task_remind_caption_motion = "判断小球上纹理的朝向 \n\n 水平条纹 = 左手食指按键\n 垂直条纹 = 右手食指按键";
	new_task_remind_caption_sound = "判断声音中有无间隔 \n\n 无间隔 = 左手食指按键\n 有间隔 = 右手食指按键";

	ans_hor = 1; 
	ans_ver = 2; 
	ans_gap = 2; 
	ans_gapno = 1; 
	
elseif task_set == 4 then
	new_task_remind_caption_motion = "判断小球上纹理的朝向 \n\n 垂直条纹 = 左手食指按键\n 水平条纹 = 右手食指按键";
	new_task_remind_caption_sound = "判断声音中有无间隔 \n\n 无间隔 = 左手食指按键\n 有间隔 = 右手食指按键";

	ans_hor = 2; 
	ans_ver = 1; 
	ans_gap = 2; 
	ans_gapno = 1; 
	
end;
#------------------------- Function Part --------------------------
include "./function.pcl";
/*
	show_this(code); 根据控制数组选择性呈现刺激
	relax_check(); 检查是否需要休息
*/
#------------------------- Show by Order --------------------------
count_relax = 0;
trial_start_instruct.present();
string new_block_type_caption = "Temp Caption";
string new_task_remind_caption = "Temp Caption";
loop int i = 1 until i > TRIAL_TOTAL
begin
		if i==1 || i == TRIAL_TOTAL/2 + 1 then
				# new_block_type_caption = "任务 " + string(i);
		new_block_type_caption = "内容";
		if trial_list[i][1] == 1 then
			new_task_remind_caption = new_task_remind_caption_motion;
			text_remind_type.set_caption(new_block_type_caption, true);
			text_remind_type.set_font_color(0,255,0);
			text_remind_type.redraw();
			text_remind_task.set_caption(new_task_remind_caption, true);
			block_instruct_trial.present();
		   block_instruct_show_trial.present();
		elseif trial_list[i][1] == 2 then
		   new_task_remind_caption = new_task_remind_caption_sound;
			text_remind_type.set_caption(new_block_type_caption, true);
			text_remind_type.set_font_color(0,255,0);
			text_remind_type.redraw();
			text_remind_task.set_caption(new_task_remind_caption, true);
			block_instruct_trial.present();
		end;
	end;
	show_this(i);
	if mod(i,TRIAL_TOTAL) == 0 then
		trial_entire_end_instruct.present();
	end;
	i = i + 1;
end;