#-------------------------- Data Record --------------------------
int wrap_count = 0;
sub record(string info)
begin
    out.open_append( "../Data/" + data_file_name );
	 wrap_count = wrap_count + 1;
	 if wrap_count%(headings.count()) != 0 then
		out.print(info);
		out.print(COMMA);
	 else
		out.print(info);
		out.print(RETURN);
	 end;
   out.close();
end;
sub record_acc_rt
begin
	stimulus_data last_stim = stimulus_manager.last_stimulus_data();
	if last_stim.type() == stimulus_hit then
		record("1");
		record(string(last_stim.reaction_time_double()));
	elseif last_stim.type() == stimulus_incorrect then
		record("0");
		record(string(last_stim.reaction_time_double()));
	else
		record("missing");
		record("missing");
	end;
end;
#-------------------------- Relax Check --------------------------
sub relax_check
begin
	if prac_marker == 1 then
		term.print_line("count_relax = " + string(count_relax));
		if count_relax == p_count_relax_limit && p_count_show_relax + 1 != prac_times/p_count_relax_limit then
			if (p_count_show_relax + 1) * p_count_relax_limit != prac_times/2 then
				p_count_show_relax = p_count_show_relax + 1;
				text_relax_remind.set_caption("休息 (" + string(p_count_show_relax) + "/" + string(prac_times/p_count_relax_limit-2) +")", true);
				trial_relax_instruct.present();
			end;
			count_relax = 0;
		end;
	elseif prac_marker == 0 then
		term.print_line("count_relax = " + string(count_relax));
		if count_relax == count_relax_limit && count_show_relax + 1 != TRIAL_TOTAL/count_relax_limit then
			count_show_relax = count_show_relax + 1;
			text_relax_remind.set_caption("休息 (" + string(count_show_relax) + "/" + string(TRIAL_TOTAL/count_relax_limit) +")", true);
			trial_relax_instruct.present();
			count_relax = 0;
		end;
	end;
end;
#-------------------------- Show This --------------------------
sub int show_this(int this, array < int,2 > trial_list_toshow, int p_marker)
begin
	int pc_r = 0;
	# fixation
	trial_fixation_event.set_duration(fix_duration[random(1,3)]);
	trial_fixation.present();
	# recored subj info and trial info
	record(subj);
	record(string(trial_mark));
	record(string(p_marker));
	trial_mark = trial_mark + 1;
	
	int block_type = trial_list_toshow[this][1];
	int main_task_type = trial_list_toshow[this][2];
	int irr_stim = trial_list_toshow[this][3];
	int indirect_task_type = trial_list_toshow[this][4];
	term.print_line("A = " + string(block_type) + ", B = " + string(main_task_type) + ", C = " + string(irr_stim) + ", D = " + string(indirect_task_type) + "\n");
	record(string(block_type));
	record(string(main_task_type));
	record(string(irr_stim));
	record(string(indirect_task_type));
	
	# main task = motion
	# motion far
	# sound decrease
	if block_type == 1 && main_task_type == 1 && irr_stim == 1 && indirect_task_type == 1 then # hor
		event_mfsd_m.set_target_button(ans_hor);
		ball.rotate_mesh(0,0,0);
		event_mfsd_s.set_stimulus(sound_decrease);
		mfsd_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 1 && main_task_type == 1 && irr_stim == 1 && indirect_task_type == 2 then # ver
		event_mfsd_m.set_target_button(ans_ver);
		ball.rotate_mesh(0,0,90.0);
		event_mfsd_s.set_stimulus(sound_decrease);
		mfsd_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# sound increase
	elseif block_type == 1 && main_task_type == 1 && irr_stim == 2 && indirect_task_type == 1 then # hor
		event_mfsi_m.set_target_button(ans_hor);
		ball.rotate_mesh(0,0,0);
		event_mfsi_s.set_stimulus(sound_increase);
		mfsi_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 1 && main_task_type == 1 && irr_stim == 2 && indirect_task_type == 2 then # ver
		event_mfsi_m.set_target_button(ans_ver);
		ball.rotate_mesh(0,0,90.0);
		event_mfsi_s.set_stimulus(sound_increase);
		mfsi_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# sound no	
	elseif block_type == 1 && main_task_type == 1 && irr_stim == 3 && indirect_task_type == 1 then # hor
		event_mf_m.set_target_button(ans_hor);
		ball.rotate_mesh(0,0,0);
		mf_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 1 && main_task_type == 1 && irr_stim == 3 && indirect_task_type == 2 then # ver
		event_mf_m.set_target_button(ans_ver);
		ball.rotate_mesh(0,0,90.0);
		mf_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# motion near
	# sound decrease
	elseif block_type == 1 && main_task_type == 2 && irr_stim == 1 && indirect_task_type == 1 then # hor
		event_mnsd_m.set_target_button(ans_hor);
		ball.rotate_mesh(0,0,0);
		event_mnsd_s.set_stimulus(sound_decrease);
		mnsd_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 1 && main_task_type == 2 && irr_stim == 1 && indirect_task_type == 2 then # ver
		event_mnsd_m.set_target_button(ans_ver);
		ball.rotate_mesh(0,0,90.0);
		event_mnsd_s.set_stimulus(sound_decrease);
		mnsd_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# sound increase	
	elseif block_type == 1 && main_task_type == 2 && irr_stim == 2 && indirect_task_type == 1 then # hor
		event_mnsi_m.set_target_button(ans_hor);
		ball.rotate_mesh(0,0,0);
		event_mnsi_s.set_stimulus(sound_increase);
		mnsi_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 1 && main_task_type == 2 && irr_stim == 2 && indirect_task_type == 2 then # ver
		event_mnsi_m.set_target_button(ans_ver);
		ball.rotate_mesh(0,0,90.0);
		event_mnsi_s.set_stimulus(sound_increase);
		mnsi_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# sound no	
	elseif block_type == 1 && main_task_type == 2 && irr_stim == 3 && indirect_task_type == 1 then # hor
		event_mn_m.set_target_button(ans_hor);
		ball.rotate_mesh(0,0,0);
		mn_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 1 && main_task_type == 2 && irr_stim == 3 && indirect_task_type == 2 then # ver
		event_mn_m.set_target_button(ans_ver);
		ball.rotate_mesh(0,0,90);
		mn_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# main_task = sound
   # sound decrease
	# motion far
	elseif block_type == 2 && main_task_type == 1 && irr_stim == 1 && indirect_task_type == 1 then # gap
		event_mfsd_m.set_target_button(ans_gap);
		event_mfsd_s.set_stimulus(sound_decrease);
		ball.clear_texture();
		mfsd_trial.present();
		ball.set_texture(txr_ball,1); 
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 2 && main_task_type == 1 && irr_stim == 1 && indirect_task_type == 2 then # nogap
		event_mfsd_m.set_target_button(ans_gapno);
		event_mfsd_s.set_stimulus(sound_decrease);
		ball.clear_texture();
		mfsd_trial.present();
		ball.set_texture(txr_ball,1); 
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# motion near
	elseif block_type == 2 && main_task_type == 1 && irr_stim == 2 && indirect_task_type == 1 then # gap
		ball.clear_texture();
		event_mnsd_s.set_stimulus(sound_decrease_gap);
		event_mnsd_m.set_target_button(ans_gap);
		mnsd_trial.present();
		ball.set_texture(txr_ball,1); 
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 2 && main_task_type == 1 && irr_stim == 2 && indirect_task_type == 2 then # nogap
		event_mnsd_m.set_target_button(ans_gapno);
		event_mnsd_s.set_stimulus(sound_decrease);
		ball.clear_texture();
		mnsd_trial.present();
		ball.set_texture(txr_ball,1); 
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# motion no	
	elseif block_type == 2 && main_task_type == 1 && irr_stim == 3 && indirect_task_type == 1 then # gap
		event_sd_s.set_target_button(ans_gap);
		event_sd_s.set_stimulus(sound_decrease_gap);
		sd_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 2 && main_task_type == 1 && irr_stim == 3 && indirect_task_type == 2 then # nogap
		event_sd_s.set_target_button(ans_gapno);
		event_sd_s.set_stimulus(sound_decrease);
		sd_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
   # sound increase
	# motion far
	elseif block_type == 2 && main_task_type == 2 && irr_stim == 1 && indirect_task_type == 1 then # gap
		event_mfsi_m.set_target_button(ans_gap);
		event_mfsi_s.set_stimulus(sound_increase_gap);
		ball.clear_texture();
		mfsi_trial.present();
		ball.set_texture(txr_ball,1); 
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 2 && main_task_type == 2 && irr_stim == 1 && indirect_task_type == 2 then # nogap
		event_mfsi_m.set_target_button(ans_gapno);
		ball.clear_texture();
		event_mfsi_s.set_stimulus(sound_increase);
		ball.set_texture(txr_ball,1); 
		mfsi_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
   # motion near
	elseif block_type == 2 && main_task_type == 2 && irr_stim == 2 && indirect_task_type == 1 then # gap
		event_mnsi_m.set_target_button(ans_gap);
		event_mnsi_s.set_stimulus(sound_increase_gap);
		ball.clear_texture();
		mnsi_trial.present();
		ball.set_texture(txr_ball,1);
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 2 && main_task_type == 2 && irr_stim == 2 && indirect_task_type == 2 then # nogap
		event_mnsi_m.set_target_button(ans_gapno);
		event_mnsi_s.set_stimulus(sound_increase);
		ball.clear_texture();
		mnsi_trial.present();
		ball.set_texture(txr_ball,1);
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	# motion no	
	elseif block_type == 2 && main_task_type == 2 && irr_stim == 3 && indirect_task_type == 1 then # gap
		ball.clear_texture();
		event_si_s.set_target_button(ans_gap);
		event_si_s.set_stimulus(sound_increase_gap);
		si_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	elseif block_type == 2 && main_task_type == 2 && irr_stim == 3 && indirect_task_type == 2 then # nogap
		event_si_s.set_target_button(ans_gapno);
		event_si_s.set_stimulus(sound_increase);
		si_trial.present();
		record_acc_rt();
		count_relax = count_relax + 1;
		relax_check();
	end;
	if p_marker == 1 then
		int type = stimulus_manager.last_stimulus_data().type();
		if (type == stimulus_hit) then
			feedback_pic.set_part( 1, good );
			feedback_trial.present();
			pc_r = 1;
		elseif (type == stimulus_miss) then
			feedback_pic.set_part( 1, missed );
			feedback_trial.present();
			pc_r = 0;
		elseif (type == stimulus_incorrect) then
			feedback_pic.set_part( 1, oops );
			feedback_trial.present();
			pc_r = 0;
		end;
	end;
	return pc_r
end;